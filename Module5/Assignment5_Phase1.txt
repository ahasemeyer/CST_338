import javax.swing.*;
import java.util.Random;
import java.awt.*;

public class Assignment5 {
   
   // static for the 57 icons and their corresponding labels
   // normally we would not have a separate label for each card, but
   // if we want to display all at once using labels, we need to.
   
   static final int NUM_CARD_IMAGES = 57; // 52 + 4 jokers + 1 back-of-card image
   static Icon[] icon = new ImageIcon[NUM_CARD_IMAGES];
      
   static void loadCardIcons()
   {
      // build the file names ("AC.gif", "2C.gif", "3C.gif", "TC.gif", etc.)
      // in a SHORT loop.  For each file name, read it in and use it to
      // instantiate each of the 57 Icons in the icon[] array
      
      int index = 0;
      
      for (int i = 0; i <= 13; i++)
      {
         for (int k = 0; k <= 3; k++)
         {
            icon[index] = new ImageIcon("images/" + turnIntIntoCardValue(i) + turnIntIntoCardSuit(k) + ".gif", "new card");
            
            index++;
         }
      }
      
      icon[index] = new ImageIcon("images/BK.gif", "back of deck");
      
   }
   
   
   // turns 0 - 13 into "A", "2", "3", ... "Q", "K", "X"
   static String turnIntIntoCardValue(int k)
   {
      String[] value = {"A","2","3","4","5","6","7","8","9","T","J","Q","K","X"};
      
      return value[k];
      
   }
   
   // turns 0 - 3 into "C", "D", "H", "S"
   static String turnIntIntoCardSuit(int j)
   {
      // an idea for another helper method (do it differently if you wish)
      
      String[] suit = {"C", "D", "H", "S"};
      
      return suit[j];
   }
   
   

   
   
   // a simple main to throw all the JLabels out there for the world to see
   public static void main(String[] args)
   {
      int k;
      
      // prepare the image icon array
      loadCardIcons();
      
      // establish main frame in which program will run
      JFrame frmMyWindow = new JFrame("Card Room");
      frmMyWindow.setSize(1150, 650);
      frmMyWindow.setLocationRelativeTo(null);
      frmMyWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      
      // set up layout which will control placement of buttons, etc.
      FlowLayout layout = new FlowLayout(FlowLayout.CENTER, 5, 20);   
      frmMyWindow.setLayout(layout);
      
      // prepare the image label array
      JLabel[] labels = new JLabel[NUM_CARD_IMAGES];
      for (k = 0; k < NUM_CARD_IMAGES; k++)
         labels[k] = new JLabel(icon[k]);
      
      // place your 3 controls into frame
      for (k = 0; k < NUM_CARD_IMAGES; k++)
         frmMyWindow.add(labels[k]);

      // show everything to the user
      frmMyWindow.setVisible(true);
      
   }
}




/****************CARD CLASS******************/
//Card Class will create cards to be used for game. Example Ace of Spades.
class Card
{
   public enum Suit{CLUBS, HEARTS, DIAMONDS, SPADES}; 
   
   private char value;
   private Suit suit;
   private boolean errorFlag; 

   //constructors 
   Card(char value, Suit suit)
   {
      set(value, suit);
   }
   // creates default value of Ace of Spades
   Card()
   {
      set('A', Suit.valueOf("SPADES"));
   }
   
   //checks to see if the input is proper for a card
   private boolean isValid(char value, Suit suit)
   {
      boolean isValid = true;
      Suit[] possibleSuit = Suit.values(); //create an array with predefined values
      
       if (value == '1' || value == '2' || value == '3' || value == '4'|| value == '5'|| value == '6' || value == '7'
            || value == '8' || value == '9' || value == 'T'|| value == 'J'|| value == 'K'|| value == 'Q'|| value == 'A')
      {
         for (int i = 0; i < possibleSuit.length; i++)
         {
            if (suit == possibleSuit[i])
            {
               isValid = false;
            }   
         }
      }
   
      return isValid;
   }
   
   //sets values for priviate members and runs through to make sure isValid is good using isValid method
   public boolean set(char value, Suit suit)
   {
      this.value = value;
      this.suit = suit;
      if (isValid(value, suit) == false)
      {
         this.errorFlag = false;
      }
      else
      {
         this.errorFlag = true;
      }
      return errorFlag;
      
   }
   //to string method allows main println
   public String toString()
   {   
      if (this.errorFlag == true)
      {
         return ("***INVALID***");
      }
      return (value + " " + suit);
   }
   
   //Accessors 
   public Suit getSuit()
   {
      return this.suit;
   }
   
   public char getValue()
   {
      return this.value;
   }
   
   public boolean getErrorFlag()
   {
      return this.errorFlag;
   }
   
   public boolean equals(Card card)
   {
      boolean isEqual = true;
      Card cardCopy = new Card(card.getValue(), card.getSuit());
      if (cardCopy.value != card.value ||cardCopy.suit != card.suit)
      {
         isEqual = false;
      }
      return isEqual;
   }
   
   
}

//************* Class Hand ************
//This class is for the cards that are in the player's hand
class Hand
{
   public int MAX_CARDS = 50; //max number of cards a player can have
   private Card[] myCards;  
   private int numCards = 0;  //cards currently in hand
   
   //Constructors
   //default
   public Hand()
   {
      myCards = new Card[MAX_CARDS];
   }
   
   //removes all cards from the hand
   public void resetHand()
   {
      numCards = 0;
   }
   
   //adds a card to the next available position giving player a new card in hand
   public boolean takeCard(Card card)
   {
      boolean result;
      if (numCards >= MAX_CARDS)
      {
          result = false;
      }
      
      else
      {
          myCards[numCards] = new Card(card.getValue(), card.getSuit());

          numCards++;
          result = true;
      }     
      return result;
            
   }
   
   //returns and removes card in the top occupied position of the array
   //if hand is empty, return card with error flag set
   public Card playCard()
   {
      if(numCards == 0)
         return new Card('Z', Card.Suit.SPADES); //throw error flag
      Card card = new Card(myCards[numCards - 1].getValue(), myCards[numCards - 1].getSuit());
      numCards = numCards - 1;
      return card;
   }
   
   
   //stringizer to display cards
   public String toString()
   {
      int cardLength = numCards;
      String cardString = "Hand = (";
      for (int i=0; i<cardLength; i++)
      {
          String stringVal = String.valueOf(myCards[i]);
          cardString += stringVal + ",";
      }   
      cardString += ")";
      return cardString;
   }
   
   //Accessor for numCards
   public int numCards()
   {
      //returns number of cards
      return numCards;
   }
   
   //returns Card at cards[k], if k is invalid, returns a card with error flag.
   public Card inspectCard(int k)
   {
      Card card1;
      if (k > numCards || k < 0)
      {
         card1 = new Card('Z', Card.Suit.SPADES); //creates a card that will not work so error flag returns true
      }

      else
      {
         card1 = new Card(myCards[k - 1].getValue(), myCards[k - 1].getSuit());
      }
      return card1;
   }
   
}


//************** Class Deck *************

//Deck of cards, can be 1-6 packs of 52 cards.  Creates deck, shuffles, and deals
class Deck
{
   // Deck MEMBERS
   
   //6 packs of 52 cards max
   public final int MAX_CARDS = 312; 
   
   //To refer to instead of creating new instances of cards for each deck
   private static Card[] masterPack = new Card[52];
   
   //cards in deck, with topCard referring to the "card on top". Refers to cards from masterPack
   private Card[] cards;
   private int topCard;
   
   // Deck CONSTRUCTORS
   
   //creates masterPack if not already done and deck with 1 pack
   Deck()
   {
      if(masterPack[0] == null)
         allocateMasterPack();
      init(1);
   }
   
   //creates masterPack if not already done and deck with given number of packs
   Deck(int numPacks)
   {
      if(masterPack[0] == null)
         allocateMasterPack();
      init(numPacks);
   }
   
   // Deck METHODS
   
   //initializes deck with references to cards in masterPack for given number of packs
   public void init(int numPacks)
   {
      //get number of cards and lower to max if needed
      int numCards = numPacks * 52;
      if(numCards > MAX_CARDS)
         numCards = MAX_CARDS;
      cards = new Card[numCards];
      
      //fill with references to cards in masterPack
      for(int i = 0; i < numCards; i++)
      {
         cards[i] = masterPack[i % 52];
      }
      
      //set the top of the deck
      topCard = numCards - 1;
   }
   
   //uses random gen to shuffle cards in deck. (Fisher-Yates algorithm)
   public void shuffle()
   {
      Random rand = new Random();
      int randIndex = 0;
      Card tempCard = cards[0];
      
      //count from top of deck down, get random index from cards below, swap with counter
      for(int i = this.getTopCard(); i > 0; i--)
      {
         randIndex = rand.nextInt(i + 1);
         tempCard = cards[i];
         cards[i] = cards[randIndex];
         cards[randIndex] = tempCard;
      }
   }
   
   //returns copy of top card, decrements topCard counter
   //if deck is empty, return card with error flag set
   public Card dealCard()
   {
      if (topCard < 0)
         return new Card('M', Card.Suit.SPADES);
      Card newCard = new Card(cards[topCard].getValue(), cards[topCard].getSuit());
      topCard--;
      return newCard;
   }
   
   //returns the top card location of deck
   public int getTopCard()
   {
      return topCard;
   }
   
   //returns Card at cards[k], if k is invalid, returns a card with error flag.
   public Card inspectCard(int k)
   {
      //if k is valid location in deck, return copy of card at k
      if (k <= this.getTopCard() && k >= 0)
      {
         Card newCard = new Card(cards[k].getValue(), cards[k].getSuit());
         return newCard;
      }
      //if k is invalid, return card with error flag
      else
      {
         return new Card('M', Card.Suit.CLUBS);
      }
   }
   
   //build static master pack of 52 cards, to refer to by various decks
   private static void allocateMasterPack()
   {
      int cardCount = 0;
      char cardVal;
      
      //cycle through the 4 suit options
      for(int suit = 0; suit < 4; suit++)
      {
         //cycle through the 13 card value options
         for(int val = 0; val < 13; val++)
         {
            // get card value character
            switch(val)
            {
               case 0:
                  cardVal = 'A';
                  break;
               case 9:
                  cardVal = 'T';
                  break;
               case 10:
                  cardVal = 'J';
                  break;
               case 11:
                  cardVal = 'Q';
                  break;
               case 12:
                  cardVal = 'K';
                  break;
               default:
                  cardVal = (char)(val + 49);
                  break;
            }

            //get suit and put card in deck
            switch(suit)
            {
               case 0:
                  masterPack[cardCount] = new Card(cardVal, Card.Suit.CLUBS);
                  break;
               case 1:
                  masterPack[cardCount] = new Card(cardVal, Card.Suit.DIAMONDS);
                  break;
               case 2:
                  masterPack[cardCount] = new Card(cardVal, Card.Suit.HEARTS);
                  break;
               case 3:
                  masterPack[cardCount] = new Card(cardVal, Card.Suit.SPADES);
                  break;
            }
            cardCount++;
         }
      }
   }
}


